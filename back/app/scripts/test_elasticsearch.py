#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω–¥–µ–∫—Å–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    docker-compose exec backend python scripts/test_elasticsearch.py
"""

import logging
import asyncio
import sys
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
sys.path.insert(0, '/usr/src/app')

from elasticsearch import AsyncElasticsearch
from elasticsearch.exceptions import ConnectionError, AuthorizationException

from src.core.config import settings

class ElasticsearchTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch"""

    def __init__(self):
        self.es_config = settings.elasticsearch
        self._client: AsyncElasticsearch = None

    async def create_client(self) -> AsyncElasticsearch:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Elasticsearch"""
        try:
            client_config = {
                "hosts": [self.es_config.url],
                "timeout": self.es_config.timeout,
                "retry_on_timeout": True,
            }

            if hasattr(self.es_config, 'use_ssl') and self.es_config.use_ssl:
                client_config["verify_certs"] = getattr(self.es_config, 'verify_certs', False)
                client_config["ssl_show_warn"] = False

            self._client = AsyncElasticsearch(**client_config)
            return self._client

        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Elasticsearch: {e}")
            raise

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch...")
        logger.info(f"üì° URL: {self.es_config.url}")

        try:
            client = await self.create_client()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
            if await client.ping():
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Elasticsearch (ping failed)")
                return False

        except ConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch: {e}")
            return False
        except AuthorizationException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Elasticsearch: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Elasticsearch: {e}")
            return False

    async def get_cluster_health(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∞—Å—Ç–µ—Ä–∞...")

        try:
            client = await self.create_client()
            health = await client.cluster.health()

            status_emoji = {
                'green': 'üü¢',
                'yellow': 'üü°',
                'red': 'üî¥'
            }

            status = health.get('status', 'unknown')
            emoji = status_emoji.get(status, '‚ö™')

            logger.info(f"{emoji} –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞: {status}")
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {health.get('number_of_nodes', 'N/A')}")
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {health.get('number_of_data_nodes', 'N/A')}")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ä–¥—ã: {health.get('active_shards', 'N/A')}")

            if health.get('unassigned_shards', 0) > 0:
                logger.warning(f"–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —à–∞—Ä–¥—ã: {health['unassigned_shards']}")

            return health

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞: {e}")
            return {}

    async def list_indices(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")

        try:
            client = await self.create_client()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            indices = await client.cat.indices(format='json', s='index')

            if not indices:
                logger.info("üì≠ –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ç–æ—á–∫–∏)
            user_indices = [idx for idx in indices if not idx['index'].startswith('.')]
            system_indices = [idx for idx in indices if idx['index'].startswith('.')]

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤:")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ: {len(user_indices)}")
            logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ: {len(system_indices)}")

            if user_indices:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã:")
                for idx in user_indices:
                    health_emoji = {'green': 'üü¢', 'yellow': 'üü°', 'red': 'üî¥'}.get(idx.get('health', ''), '‚ö™')
                    logger.info(f"{health_emoji} {idx['index']}")
                    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {idx.get('docs.count', 'N/A')}")
                    logger.info(f"–†–∞–∑–º–µ—Ä: {idx.get('store.size', 'N/A')}")
                    logger.info(f"–°—Ç–∞—Ç—É—Å: {idx.get('status', 'N/A')}")
                    logger.info("")

            if system_indices and len(system_indices) <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
                logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–ø–µ—Ä–≤—ã–µ {min(10, len(system_indices))}):")
                for idx in system_indices[:10]:
                    logger.info(f"‚Ä¢ {idx['index']}")
            elif system_indices:
                logger.info(f"‚öôÔ∏è  –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {len(system_indices)} (—Å–∫—Ä—ã—Ç—ã)")

            return indices

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            return []

    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Elasticsearch"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Elasticsearch")

        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_ok = await self.test_connection()
        if not connection_ok:
            logger.error("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
        await self.get_cluster_health()

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        await self.list_indices()

        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Elasticsearch –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._client:
            await self._client.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ElasticsearchTester()

    try:
        await tester.run_full_test()
    except Exception as e:
        logger.error(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: {e}")
    finally:
        await tester.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ main
    asyncio.run(main())