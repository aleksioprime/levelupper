import asyncio
import uuid
import sys
sys.path.append('/usr/src/app')
from src.services.user import auth_service
from src.core.config import settings

async def test():
    user_id = uuid.UUID('89ee9213-0207-4e76-b134-22f6c79d4ecf')

    print('=== –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ===')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    import httpx
    async with httpx.AsyncClient() as client:
        auth_response = await client.post(
            f'{settings.auth_service.url}/api/v1/auth/login/',
            json={'username': 'admin', 'password': 'admin123'}
        )
        user_token = auth_response.json()['access_token']

    print('1. ‚úÖ Service token (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):')
    result1 = await auth_service.get_user_info(user_id)
    print(f'   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result1.username}')

    print('\\n2. ‚úÖ User token:')
    result2 = await auth_service.get_user_info(user_id, user_token=user_token)
    print(f'   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result2.username}')

    print('\\n3. ‚úÖ Convenience methods:')
    result3 = await auth_service.get_user_info_by_service(user_id)
    result4 = await auth_service.get_user_info_by_user(user_id, user_token)
    print(f'   Service method: {result3.username}')
    print(f'   User method: {result4.username}')

    print('\\n4. ‚úÖ –ë–∞—Ç—á-–∑–∞–ø—Ä–æ—Å—ã:')
    batch1 = await auth_service.get_users_info_by_service([user_id])
    batch2 = await auth_service.get_users_info_by_user([user_id], user_token)
    print(f'   –ë–∞—Ç—á service: {len(batch1)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    print(f'   –ë–∞—Ç—á user: {len(batch2)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

    print('\\n5. üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è service token:')
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑ allow_service_auth (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
    try:
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å /users/me/ —Å service token (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω)
            response = await client.get(
                f'{settings.auth_service.url}/api/v1/users/me/',
                headers={'Authorization': f'Bearer {settings.auth_service.service_token}'}
            )
            if response.status_code == 403:
                print('   ‚úÖ Service token –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è /users/me/')
            elif response.status_code == 200:
                print('   ‚ùå –û–®–ò–ë–ö–ê: Service token –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è /users/me/')
            elif response.status_code == 500:
                print('   ‚úÖ Service token –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è /users/me/ (500 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞)')
                print('      (–≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ - —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç service auth)')
            else:
                print(f'   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /users/me/: {response.status_code}')
                print(f'      –û—Ç–≤–µ—Ç: {response.text[:100]}...')
    except Exception as e:
        print(f'   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}')

    print('\\n6. ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ service token —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ service token —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
    try:
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º /users/{user_id}/ —Å service token (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
            response = await client.get(
                f'{settings.auth_service.url}/api/v1/users/{user_id}/',
                headers={'Authorization': f'Bearer {settings.auth_service.service_token}'}
            )
            if response.status_code == 200:
                user_data = response.json()
                print(f'   ‚úÖ Service token —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è /users/{{user_id}}/: {user_data["username"]}')
            else:
                print(f'   ‚ùå –û–®–ò–ë–ö–ê: Service token –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è /users/{{user_id}}/')
                print(f'      –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}')

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º /users/batch/ —Å service token (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
            batch_response = await client.post(
                f'{settings.auth_service.url}/api/v1/users/batch/',
                headers={'Authorization': f'Bearer {settings.auth_service.service_token}'},
                json={'user_ids': [str(user_id)]}
            )
            if batch_response.status_code == 200:
                batch_data = batch_response.json()
                users_count = len(batch_data.get('users', {}))
                print(f'   ‚úÖ Service token —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è /users/batch/: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            else:
                print(f'   ‚ùå –û–®–ò–ë–ö–ê: Service token –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è /users/batch/')
                print(f'      –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {batch_response.status_code}')

    except Exception as e:
        print(f'   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {e}')

    print('\\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')

asyncio.run(test())