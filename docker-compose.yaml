x-app: &app
  env_file:
    - ./.env
  restart: always
  platform: linux/amd64

services:
  postgres:
    image: postgres:14
    container_name: learning-postgres
    <<: *app
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
      - ./back/postgres/init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh
    environment:
      TZ: "Europe/Moscow"
      PGTZ: "Europe/Moscow"

  redis:
    image: redis:6
    container_name: learning-redis
    <<: *app
    volumes:
      - redis_volume:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.9.1-python3.11
    container_name: airflow-webserver
    <<: *app
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - ./back/airflow/dags:/opt/airflow/dags
      - ./back/airflow/logs:/opt/airflow/logs
      - ./back/airflow/plugins:/opt/airflow/plugins
      - ./back/airflow/init.sh:/opt/airflow/init.sh
    ports:
      - 8380:8080
    entrypoint: /opt/airflow/init.sh
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.9.1-python3.11
    container_name: airflow-scheduler
    <<: *app
    depends_on:
      - airflow-webserver
    volumes:
      - ./back/airflow/dags:/opt/airflow/dags
      - ./back/airflow/logs:/opt/airflow/logs
      - ./back/airflow/plugins:/opt/airflow/plugins
      - ./back/airflow/init.sh:/opt/airflow/init.sh
    entrypoint: /opt/airflow/init.sh
    command: scheduler

  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elasticsearch
    <<: *app
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ports:
      - 9200:9200
    volumes:
      - es_data:/usr/share/elasticsearch/data

  backend:
    build:
      context: ./back
    container_name: learning-backend
    <<: *app
    volumes:
      - ./back:/usr/src/app/
    ports:
      - "8301:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./front
      target: dev
      args:
        - VITE_LOGGING=${VITE_LOGGING}
        - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    <<: *app
    container_name: learning-frontend
    volumes:
      - ./front/app/src:/usr/src/app/src
    ports:
      - "8302:5173"
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_volume:
  redis_volume:
  es_data:
